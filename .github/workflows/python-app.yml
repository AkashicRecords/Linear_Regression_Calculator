name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov numpy matplotlib
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run tests with coverage
      run: |
        pytest --cov=./ --cov-report=xml --cov-report=term-missing --cov-config=.coveragerc --cov-fail-under=90
        
        echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "### Overall Coverage" >> $GITHUB_STEP_SUMMARY
        coverage report --format=markdown >> $GITHUB_STEP_SUMMARY
        
        echo "### Component Coverage Analysis" >> $GITHUB_STEP_SUMMARY
        echo "#### Core Linear Regression (Lin_Calc.py)" >> $GITHUB_STEP_SUMMARY
        echo "- Tests model fitting, prediction, and input validation" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage: $(coverage report | grep Lin_Calc.py | awk '{print $4}')" >> $GITHUB_STEP_SUMMARY
        
        echo "#### GUI Interface (Lin_Calc_GUI.py)" >> $GITHUB_STEP_SUMMARY
        echo "- Tests GUI initialization, input parsing, and plotting" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage: $(coverage report | grep Lin_Calc_GUI.py | awk '{print $4}')" >> $GITHUB_STEP_SUMMARY
        
        echo "#### CLI Interface (Lin_Calc_CLI.py)" >> $GITHUB_STEP_SUMMARY
        echo "- Tests command-line argument parsing and execution" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage: $(coverage report | grep Lin_Calc_CLI.py | awk '{print $4}')" >> $GITHUB_STEP_SUMMARY
        
        echo "### Failed Tests" >> $GITHUB_STEP_SUMMARY
        pytest tests/ -v 2>&1 | grep -A 10 "FAILED" >> $GITHUB_STEP_SUMMARY || true
        
        echo "### Coverage Details" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        coverage report >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true 